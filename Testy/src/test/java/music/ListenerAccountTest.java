package music;
import database.DatabaseConnection;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class ListenerAccountTest {
    @Test
    void testRegisterListenerAccount() throws SQLException
    {
        // –®–∞–≥ 0: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        DatabaseConnection.connect("songs.db");

        // –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
        ListenerAccount.Persistence.init();

        // –®–∞–≥ 2: —Å–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
        String username = "test_user_" + System.currentTimeMillis();
        String password = "test123";

        // –®–∞–≥ 3: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        int id = ListenerAccount.Persistence.register(username, password);

        // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ account
        PreparedStatement stmt1 = DatabaseConnection.getConnection().prepareStatement(
                "SELECT username FROM account WHERE id = ?"
        );
        stmt1.setInt(1, id);
        ResultSet rs1 = stmt1.executeQuery();
        assertTrue(rs1.next());
        assertEquals(username, rs1.getString("username"));

        // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ listener_account —Å 0 –∫—Ä–µ–¥–∏—Ç–æ–≤
        PreparedStatement stmt2 = DatabaseConnection.getConnection().prepareStatement(
                "SELECT credits FROM listener_account WHERE id_account = ?"
        );
        stmt2.setInt(1, id);
        ResultSet rs2 = stmt2.executeQuery();
        assertTrue(rs2.next());
        assertEquals(0, rs2.getInt("credits")); // –∫—Ä–µ–¥–∏—Ç—ã = 0
    }

    @Test
    void testLoginToListenerAccount() throws Exception {
        // 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É
        DatabaseConnection.connect("songs.db");

        // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
        ListenerAccount.Persistence.init();

        // 3. –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
        String username = "user_" + System.currentTimeMillis();
        String password = "secret123";

        // 4. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ id
        int id = ListenerAccount.Persistence.register(username, password);

        // 5. –í—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–Ω —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏
        ListenerAccount account = ListenerAccount.Persistence.authenticate(username, password);

        // 6. –ü—Ä–æ–≤–µ—Ä–∫–∏
        assertNotNull(account); // –ª–æ–≥–∏–Ω –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ, –æ–±—ä–µ–∫—Ç –µ—Å—Ç—å
        assertEquals(username, account.getUsername()); // –∏–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        assertEquals(id, account.getId());             // id —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    }

    @Test
    void testInitialCreditsIsZero() throws SQLException {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É
        DatabaseConnection.connect("songs.db");

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
        ListenerAccount.Persistence.init();

        String username = "user_" + System.currentTimeMillis();
        String password = "haslo";

        int id = ListenerAccount.Persistence.register(username, password);

        int credits = ListenerAccount.Persistence.getCredits(id);
        assertEquals(0, credits); // –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0
    }

    @Test
    void testAddingCredits() throws SQLException {
        DatabaseConnection.connect("songs.db");

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
        ListenerAccount.Persistence.init();
        String username = "user_" + System.currentTimeMillis();
        String password = "haslo";

        int id = ListenerAccount.Persistence.register(username, password);

        ListenerAccount.Persistence.addCredits(id, 50);
        int credits = ListenerAccount.Persistence.getCredits(id);

        assertEquals(50, credits); // –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 50
    }

    @Test
    void testBuySong_allCases() throws Exception {
        DatabaseConnection.connect("songs.db");
        ListenerAccount.Persistence.init();

        String username = "u_" + System.currentTimeMillis();
        String password = "pass";

        int id = ListenerAccount.Persistence.register(username, password);

        // –î–æ–±–∞–≤–∏–º 1 –∫—Ä–µ–¥–∏—Ç –≤—Ä—É—á–Ω—É—é
        ListenerAccount.Persistence.addCredits(id, 1);

        // üîπ –ü–æ–ø—ã—Ç–∫–∞ –∫—É–ø–∏—Ç—å –ø–µ—Å–Ω—é (–Ω–µ –∫—É–ø–ª–µ–Ω–∞, –µ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç—ã)
        ListenerAccount.Persistence.buySong(id, 1);
        assertTrue(ListenerAccount.Persistence.hasSong(id, 1));
        assertEquals(0, ListenerAccount.Persistence.getCredits(id)); // –∫—Ä–µ–¥–∏—Ç —Å–ø–∏—Å–∞–Ω

        // üîπ –ü–æ–ø—ã—Ç–∫–∞ –∫—É–ø–∏—Ç—å —Ç—É –∂–µ –ø–µ—Å–Ω—é –ø–æ–≤—Ç–æ—Ä–Ω–æ
        ListenerAccount.Persistence.buySong(id, 1); // –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –±–µ–∑ –æ—à–∏–±–∫–∏

        // üîπ –ü–æ–ø—ã—Ç–∫–∞ –∫—É–ø–∏—Ç—å –Ω–æ–≤—É—é –ø–µ—Å–Ω—é –±–µ–∑ –∫—Ä–µ–¥–∏—Ç–æ–≤
        Exception exception = assertThrows(NotEnoughCreditsException.class, () ->
                ListenerAccount.Persistence.buySong(id, 2)
        );
        assertEquals("Nie masz kredyt√≥w!", exception.getMessage());
    }

//    @Test
//    void testCreatePlaylist() throws Exception {
//        DatabaseConnection.connect("songs.db");
//        ListenerAccount.Persistence.init();
//
//        String username = "user_" + System.currentTimeMillis();
//        String password = "pass";
//        int id = ListenerAccount.Persistence.register(username, password);
//
//        // –î–æ–±–∞–≤–∏–º –∫—Ä–µ–¥–∏—Ç—ã –∏ –∫—É–ø–∏–º –ø–µ—Å–Ω—é
//        ListenerAccount.Persistence.addCredits(id, 2);
//        ListenerAccount.Persistence.buySong(id, 1); // –ö—É–ø–∏–ª–∏ 1
//
//        // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç —Å 1 –∏ 2
//        List<Integer> songIds = Arrays.asList(1, 2);
//        Playlist playlist = ListenerAccount.Persistence.createPlaylist(id, songIds);
//
//        // –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
//        Playlist expected = new Playlist();
//        expected.add(SongPersistence.getSongById(1));
//        expected.add(SongPersistence.getSongById(2)); // –∫—É–ø–ª–µ–Ω–æ –≤–æ –≤—Ä–µ–º—è createPlaylist
//
//        assertEquals(expected.toString(), playlist.toString()); // –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å equals()
//    }

}